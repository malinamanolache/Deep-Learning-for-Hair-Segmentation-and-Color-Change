# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from pyqtgraph import PlotWidget
import numpy as np
import cv2
from histogram_plot_ui import Ui_HistogramWindow
from PyQt5.QtCore import *
from inference import predict


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1604, 867)
        MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.image_container = QtWidgets.QLabel(self.centralwidget)
        self.image_container.setGeometry(QtCore.QRect(40, 140, 531, 621))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.image_container.setFont(font)
        self.image_container.setAlignment(QtCore.Qt.AlignCenter)
        self.image_container.setObjectName("image_container")
        self.mask_container = QtWidgets.QLabel(self.centralwidget)
        self.mask_container.setGeometry(QtCore.QRect(1340, 140, 531, 621))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.mask_container.setFont(font)
        self.mask_container.setAlignment(QtCore.Qt.AlignCenter)
        self.mask_container.setObjectName("mask_container")
        self.pushButton_browse_image = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_browse_image.setGeometry(QtCore.QRect(30, 40, 191, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_browse_image.setFont(font)
        self.pushButton_browse_image.setObjectName("pushButton_browse_image")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(620, 490, 541, 141))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.layoutWidget = QtWidgets.QWidget(self.groupBox)
        self.layoutWidget.setGeometry(QtCore.QRect(40, 40, 351, 71))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_R = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_R.setFont(font)
        self.label_R.setObjectName("label_R")
        self.horizontalLayout_4.addWidget(self.label_R)
        self.red_value = QtWidgets.QTextEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.red_value.setFont(font)
        self.red_value.setObjectName("red_value")
        self.horizontalLayout_4.addWidget(self.red_value)
        self.label_G = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_G.setFont(font)
        self.label_G.setObjectName("label_G")
        self.horizontalLayout_4.addWidget(self.label_G)
        self.green_value = QtWidgets.QTextEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.green_value.setFont(font)
        self.green_value.setObjectName("green_value")
        self.horizontalLayout_4.addWidget(self.green_value)
        self.label_B = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_B.setFont(font)
        self.label_B.setObjectName("label_B")
        self.horizontalLayout_4.addWidget(self.label_B)
        self.blue_vaue = QtWidgets.QTextEdit(self.layoutWidget)
        self.blue_vaue.setObjectName("blue_vaue")
        self.horizontalLayout_4.addWidget(self.blue_vaue)
        self.verticalLayout_2.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.alpha_value = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.alpha_value.setFont(font)
        self.alpha_value.setObjectName("alpha_value")
        self.horizontalLayout_5.addWidget(self.alpha_value)
        self.alpha_slider = QtWidgets.QSlider(self.layoutWidget)
        self.alpha_slider.setMaximum(100)
        self.alpha_slider.setSingleStep(5)
        self.alpha_slider.setOrientation(QtCore.Qt.Horizontal)
        self.alpha_slider.setObjectName("alpha_slider")
        self.horizontalLayout_5.addWidget(self.alpha_slider)
        self.verticalLayout_2.addLayout(self.horizontalLayout_5)
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(400, 80, 55, 21))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.blending_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.blending_checkbox.setGeometry(QtCore.QRect(500, 20, 16, 16))
        self.blending_checkbox.setText("")
        self.blending_checkbox.setObjectName("blending_checkbox")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(620, 260, 581, 221))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setObjectName("groupBox_2")
        self.hsv_checkbox = QtWidgets.QCheckBox(self.groupBox_2)
        self.hsv_checkbox.setGeometry(QtCore.QRect(550, 20, 16, 16))
        self.hsv_checkbox.setText("")
        self.hsv_checkbox.setObjectName("hsv_checkbox")
        self.layoutWidget1 = QtWidgets.QWidget(self.groupBox_2)
        self.layoutWidget1.setGeometry(QtCore.QRect(30, 50, 501, 141))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.hue_label = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.hue_label.setFont(font)
        self.hue_label.setObjectName("hue_label")
        self.horizontalLayout.addWidget(self.hue_label)
        self.hue_slider = QtWidgets.QSlider(self.layoutWidget1)
        self.hue_slider.setMaximum(180)
        self.hue_slider.setOrientation(QtCore.Qt.Horizontal)
        self.hue_slider.setObjectName("hue_slider")
        self.horizontalLayout.addWidget(self.hue_slider)
        self.hue_value = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.hue_value.setFont(font)
        self.hue_value.setAlignment(QtCore.Qt.AlignCenter)
        self.hue_value.setObjectName("hue_value")
        self.horizontalLayout.addWidget(self.hue_value)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.saturation_label = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.saturation_label.setFont(font)
        self.saturation_label.setObjectName("saturation_label")
        self.horizontalLayout_2.addWidget(self.saturation_label)
        self.saturation_slider = QtWidgets.QSlider(self.layoutWidget1)
        self.saturation_slider.setMinimum(-150)
        self.saturation_slider.setMaximum(150)
        self.saturation_slider.setOrientation(QtCore.Qt.Horizontal)
        self.saturation_slider.setObjectName("saturation_slider")
        self.horizontalLayout_2.addWidget(self.saturation_slider)
        self.saturation_value = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.saturation_value.setFont(font)
        self.saturation_value.setObjectName("saturation_value")
        self.horizontalLayout_2.addWidget(self.saturation_value)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.value_label = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.value_label.setFont(font)
        self.value_label.setObjectName("value_label")
        self.horizontalLayout_3.addWidget(self.value_label)
        self.value_slider = QtWidgets.QSlider(self.layoutWidget1)
        self.value_slider.setMinimum(-150)
        self.value_slider.setMaximum(150)
        self.value_slider.setOrientation(QtCore.Qt.Horizontal)
        self.value_slider.setObjectName("value_slider")
        self.horizontalLayout_3.addWidget(self.value_slider)
        self.value_value = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.value_value.setFont(font)
        self.value_value.setObjectName("value_value")
        self.horizontalLayout_3.addWidget(self.value_value)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.pushButton_3 = QtWidgets.QPushButton(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout.addWidget(self.pushButton_3)
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(620, 650, 441, 101))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.groupBox_3.setFont(font)
        self.groupBox_3.setObjectName("groupBox_3")
        self.splitter = QtWidgets.QSplitter(self.groupBox_3)
        self.splitter.setGeometry(QtCore.QRect(30, 40, 401, 27))
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.label = QtWidgets.QLabel(self.splitter)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.kernel_slider = QtWidgets.QSlider(self.splitter)
        self.kernel_slider.setMinimum(1)
        self.kernel_slider.setMaximum(51)
        self.kernel_slider.setSingleStep(2)
        self.kernel_slider.setOrientation(QtCore.Qt.Horizontal)
        self.kernel_slider.setObjectName("kernel_slider")
        self.label_2 = QtWidgets.QLabel(self.splitter)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(620, 70, 311, 181))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.groupBox_4.setFont(font)
        self.groupBox_4.setObjectName("groupBox_4")
        self.comboBox = QtWidgets.QComboBox(self.groupBox_4)
        self.comboBox.setGeometry(QtCore.QRect(10, 50, 271, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.comboBox.setFont(font)
        self.comboBox.setEditable(True)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.inference_button = QtWidgets.QPushButton(self.groupBox_4)
        self.inference_button.setGeometry(QtCore.QRect(10, 90, 141, 61))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.inference_button.setFont(font)
        self.inference_button.setObjectName("inference_button")
        self.groupBox_5 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_5.setGeometry(QtCore.QRect(1070, 650, 261, 101))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.groupBox_5.setFont(font)
        self.groupBox_5.setObjectName("groupBox_5")
        self.hist_eq_button = QtWidgets.QPushButton(self.groupBox_5)
        self.hist_eq_button.setGeometry(QtCore.QRect(10, 30, 231, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.hist_eq_button.setFont(font)
        self.hist_eq_button.setObjectName("hist_eq_button")
        self.clahe_button = QtWidgets.QPushButton(self.groupBox_5)
        self.clahe_button.setGeometry(QtCore.QRect(10, 60, 231, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.clahe_button.setFont(font)
        self.clahe_button.setObjectName("clahe_button")
        self.save_img_button = QtWidgets.QPushButton(self.centralwidget)
        self.save_img_button.setGeometry(QtCore.QRect(620, 760, 131, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.save_img_button.setFont(font)
        self.save_img_button.setObjectName("save_img_button")
        self.groupBox_4.raise_()
        self.groupBox_3.raise_()
        self.image_container.raise_()
        self.mask_container.raise_()
        self.pushButton_browse_image.raise_()
        self.groupBox.raise_()
        self.groupBox_2.raise_()
        self.groupBox_5.raise_()
        self.save_img_button.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1604, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # self.pushButton.clicked.connect(self.pushbutton_image_action)
        # self.pushButton_2.clicked.connect(self.pushbutton_mask_action)
        self.pushButton_3.clicked.connect(self.show_histogram_window)
        self.inference_button.clicked.connect(self.predict_mask)
        self.hue_slider.valueChanged.connect(self.hsv_change)
        self.value_slider.valueChanged.connect(self.hsv_change)
        self.saturation_slider.valueChanged.connect(self.hsv_change)
        self.alpha_slider.valueChanged.connect(self.change_alpha)
        self.pushButton_browse_image.clicked.connect(self.select_and_display)
        self.kernel_slider.valueChanged.connect(self.edge_fading_slider)

        self.hsv_checkbox.stateChanged.connect(self.handleHSVCheckboxStateChanged)
        self.hsv_checkbox.setChecked(True)
        self.red_value.setEnabled(False)
        self.blue_vaue.setEnabled(False)
        self.green_value.setEnabled(False)
        self.alpha_slider.setEnabled(False)
        self.blending_checkbox.stateChanged.connect(self.handleBlendCheckboxStateChanged)
        
        self.hist_eq_button.setCheckable(True)
        self.clahe_button.setCheckable(True)
        self.hist_eq_button.clicked.connect(self.handle_hist_eq_button)
        self.clahe_button.clicked.connect(self.handle_clahe_button)
        self.save_img_button.clicked.connect(self.save_image)
        # self.hist_eq_button.setChecked(False)
        # self.hist_eq_button.toggle()
        
        self.image_path = ''
        self.mask_path = ''
        self.image = np.zeros((100, 100))
        self.resized_image = np.zeros((100, 100))        
        self.mask = np.zeros((100, 100))
        self.prediction = np.zeros((100, 100))
        self.current_image = np.zeros((100, 100))
        self.current_mask = np.zeros((100, 100))
        self.R = 0
        self.B = 0
        self.G = 0
        self.width = 0
        self.height = 0

        self.hist_window = QtWidgets.QMainWindow()
        self.hist_ui = Ui_HistogramWindow()
        self.hist_ui.setupUi(self.hist_window)
        self.hist_window.setWindowFlags(Qt.WindowStaysOnTopHint)
        

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def save_image(self):
        options = QtWidgets.QFileDialog.Options()
        file_path, _ = QtWidgets.QFileDialog.getSaveFileName(
            self, "Save image", "", "Image Files (*.png *.jpg *.jpeg)", options=options
        )

        if file_path:
            pixmap = self.image_container.pixmap()

            qimage = pixmap.toImage()
            width = qimage.width()
            height = qimage.height()
            buffer = qimage.bits().asstring(qimage.byteCount())
            image = np.frombuffer(buffer, dtype=np.uint8).reshape((height, width, 4))
            image = image[..., :3]  # Drop alpha channel

            image = cv2.resize(image, (self.width, self.height))

            cv2.imwrite(file_path, image)

    
    
    def predict_mask(self):
        model_name = self.comboBox.currentText()
        self.mask = predict(self.image, model_name)
        self.mask = cv2.cvtColor(self.mask, cv2.COLOR_GRAY2RGB)
        resized_mask = self.resize_image_to_fit(self.mask, self.mask_container)
        
        height, width, channel = resized_mask.shape
        bytes_per_line = channel * width
        Qt_format = QtGui.QImage(resized_mask.data, width, height, bytes_per_line, QtGui.QImage.Format_RGB888)
        self.mask_container.setPixmap(QtGui.QPixmap(Qt_format)) 

    
    def handleBlendCheckboxStateChanged(self, state):
        if state == Qt.Checked:
            self.hsv_checkbox.setChecked(False)

            # enable blending method
            self.red_value.setEnabled(True)
            self.blue_vaue.setEnabled(True)
            self.green_value.setEnabled(True)
            self.alpha_slider.setEnabled(True)

            # enable hsv method
            self.hue_slider.setEnabled(False)
            self.value_slider.setEnabled(False)
            self.saturation_slider.setEnabled(False)
            self.pushButton_3.setEnabled(False)

    def handleHSVCheckboxStateChanged(self, state):
        if state == Qt.Checked:
            self.blending_checkbox.setChecked(False)

            # disable blending method
            self.red_value.setEnabled(False)
            self.blue_vaue.setEnabled(False)
            self.green_value.setEnabled(False)
            self.alpha_slider.setEnabled(False)

            # enable hsv method
            self.hue_slider.setEnabled(True)
            self.value_slider.setEnabled(True)
            self.saturation_slider.setEnabled(True)
            self.pushButton_3.setEnabled(True)

    def handle_hist_eq_button(self):
        if self.hist_eq_button.isChecked():
            eq_img = self.equalize_hist(self.current_image, self.mask)
            kernel_size = self.kernel_slider.value() if self.kernel_slider.value() % 2 != 0 else self.kernel_slider.value() + 1

            if kernel_size != 1:
                blurred_mask = cv2.GaussianBlur(self.mask,(kernel_size,kernel_size),0)
                colored_hair = eq_img.astype(float)
                original_image = self.image.astype(float)
                blurred_mask = blurred_mask.astype(float)/255
                blended = blurred_mask*colored_hair + (1-blurred_mask)*original_image
                blended = blended.astype("uint8")
                eq_img = blended

            eq_img = self.resize_image_to_fit(eq_img, self.image_container)
            height, width, channel = eq_img.shape
            bytes_per_line = channel * width
            Qt_format = QtGui.QImage(eq_img.data, width, height, bytes_per_line, QtGui.QImage.Format_RGB888)
            self.image_container.setPixmap(QtGui.QPixmap(Qt_format))

    def handle_clahe_button(self):
        if self.clahe_button.isChecked():
            clahe_img = self.apply_clahe(self.current_image, self.mask)
            kernel_size = self.kernel_slider.value() if self.kernel_slider.value() % 2 != 0 else self.kernel_slider.value() + 1

            if kernel_size != 1:
                blurred_mask = cv2.GaussianBlur(self.mask,(kernel_size,kernel_size),0)
                colored_hair = eq_img.astype(float)
                original_image = self.image.astype(float)
                blurred_mask = blurred_mask.astype(float)/255
                blended = blurred_mask*colored_hair + (1-blurred_mask)*original_image
                blended = blended.astype("uint8")
                eq_img = blended

            clahe_img = self.resize_image_to_fit(clahe_img, self.image_container)
            height, width, channel = clahe_img.shape
            bytes_per_line = channel * width
            Qt_format = QtGui.QImage(clahe_img.data, width, height, bytes_per_line, QtGui.QImage.Format_RGB888)
            self.image_container.setPixmap(QtGui.QPixmap(Qt_format))       
    
    def show_histogram_window(self):
        self.hist_window.show()


    def select_and_display(self):
        file_dialog = QtWidgets.QFileDialog()
        file_path, _ = file_dialog.getOpenFileName(self, "Select Image", "", "Image Files (*.png *.jpg *.jpeg)")
        self.image = cv2.imread(file_path)
        self.image = cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB)
        self.current_image = self.image

        h, w, ch = self.image.shape
        self.height = h
        self.width = w

        self.resized_image = self.resize_image_to_fit(self.image, self.image_container)
        height, width, channel = self.resized_image.shape
        bytes_per_line = channel * width
        Qt_format = QtGui.QImage(self.resized_image.data, width, height, bytes_per_line, QtGui.QImage.Format_RGB888)
        self.image_container.setPixmap(QtGui.QPixmap(Qt_format))


    def change_alpha(self):
        self.R = int(self.red_value.toPlainText())
        self.G = int(self.green_value.toPlainText())
        self.B = int(self.blue_vaue.toPlainText())
        alpha = self.alpha_slider.value()/100

        blended_image = self.blend_method(self.image, alpha)
        self.current_image = blended_image
        
        if self.hist_eq_button.isChecked():
            blended_image = self.equalize_hist(self.current_image, self.mask)

        if self.clahe_button.isChecked():
            blended_image = self.apply_clahe(self.current_image, self.mask)
        
        kernel_size = self.kernel_slider.value() if self.kernel_slider.value() % 2 != 0 else self.kernel_slider.value() + 1
        self.label_3.setText(str(self.alpha_slider.value())+"%")

        if kernel_size != 1:
            blurred_mask = cv2.GaussianBlur(self.mask,(kernel_size,kernel_size),0)
            colored_hair = blended.astype(float)
            original_image = self.image.astype(float)
            blurred_mask = blurred_mask.astype(float)/255
            blended = blurred_mask*colored_hair + (1-blurred_mask)*original_image
            blended = blended.astype("uint8")
            blended_image = blended

        blended_image = self.resize_image_to_fit(blended_image, self.image_container)
        height, width, channel = blended_image.shape
        bytes_per_line = channel * width
        Qt_format = QtGui.QImage(blended_image.data, width, height, bytes_per_line, QtGui.QImage.Format_RGB888)
        self.image_container.setPixmap(QtGui.QPixmap(Qt_format))

    def equalize_hist(self, image, mask):
        indices = np.where(mask[:,:,0]==255)
        image[indices] = np.squeeze(cv2.equalizeHist(image[indices]))
        return image
    
    def apply_clahe(self, image, mask):
        clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize = (8,8))
        indices = np.where(mask[:,:,0]==255)
        image[indices] = np.squeeze(clahe.apply(image[indices]))
        return image
    
    def blend_method(self, img, alpha):

        intermediate = np.copy(img)
        intermediate[(self.mask==255).all(-1)] = [self.R,self.G, self.B]
        new_image = cv2.addWeighted(intermediate, 1-alpha, img, alpha,0)

        return new_image
    
    def hsv_change(self):
        value_h = self.hue_slider.value()
        value_s = self.saturation_slider.value()
        value_v = self.value_slider.value()
        self.hue_value.setText(str(value_h))
        self.saturation_value.setText(str(value_s))
        self.value_value.setText(str(value_v))
        
        hsv_img = cv2.cvtColor(self.image, cv2.COLOR_RGB2HSV)
        h, s, v = cv2.split(hsv_img)
        
        indices = np.where(self.mask[:,:,0]==255)
        h[indices] = value_h
        
        s = np.array(s, dtype=np.float32)
        s[indices] = s[indices]+value_s
        s = np.clip(s, 0, 255)
        s = s.astype(np.uint8)

        v = np.array(v, dtype=np.float32)
        v[indices] = v[indices]+value_v
        v = np.clip(v, 0, 255)
        v = v.astype(np.uint8)
        
        hist_h = np.squeeze(cv2.calcHist([h[indices]], [0], None, [181], [0, 181]))
        hist_v = np.squeeze(cv2.calcHist([v[indices]], [0], None, [256], [0, 256]))
        hist_s = np.squeeze(cv2.calcHist([s[indices]], [0], None, [256], [0, 256]))

        if self.hist_window.isVisible():
            self.hist_ui.h_plot.setData(np.arange(0, 181, 1), hist_h)
            self.hist_ui.s_plot.setData(np.arange(0, 256, 1), hist_s)
            self.hist_ui.v_plot.setData(np.arange(0, 256, 1), hist_v)

        new_image = cv2.merge([h, s, v])
        image_rgb = cv2.cvtColor(new_image, cv2.COLOR_HSV2RGB)
        self.current_image = image_rgb
        # edge fading
        if self.hist_eq_button.isChecked():
            image_rgb = self.equalize_hist(self.current_image, self.mask)

        if self.clahe_button.isChecked():
            image_rgb = self.apply_clahe(self.current_image, self.mask)
        
        kernel_size = self.kernel_slider.value() if self.kernel_slider.value() % 2 != 0 else self.kernel_slider.value() + 1

        if kernel_size != 1:
            blurred_mask = cv2.GaussianBlur(self.mask,(kernel_size,kernel_size),0)
            colored_hair = image_rgb.astype(float)
            original_image = self.image.astype(float)
            blurred_mask = blurred_mask.astype(float)/255
            blended = blurred_mask*colored_hair + (1-blurred_mask)*original_image
            blended = blended.astype("uint8")
            image_rgb = blended

        image_rgb = self.resize_image_to_fit(image_rgb, self.image_container)
        height, width, channel = image_rgb.shape
        bytes_per_line = channel * width
        Qt_format = QtGui.QImage(image_rgb.data, width, height, bytes_per_line, QtGui.QImage.Format_RGB888)
        self.image_container.setPixmap(QtGui.QPixmap(Qt_format))

    def edge_fading_slider(self):
        original_image = self.image
        colored_image = self.current_image
        mask = self.mask
        k_size = self.kernel_slider.value() if self.kernel_slider.value() % 2 != 0 else self.kernel_slider.value() + 1
        self.label_2.setText(str(k_size)+"x"+str(k_size))
        blurred_mask, faded_image = self.edge_fading(original_image, colored_image, mask, k_size)
        blurred_mask_resized = self.resize_image_to_fit(blurred_mask, self.image_container)
        faded_image_resized = self.resize_image_to_fit(faded_image, self.mask_container)

        # disply image
        if not np.array_equal(self.current_image, self.image): 
            height, width, channel = faded_image_resized.shape
            bytes_per_line = channel * width
            Qt_format = QtGui.QImage(faded_image_resized.data, width, height, bytes_per_line, QtGui.QImage.Format_RGB888)
            self.image_container.setPixmap(QtGui.QPixmap(Qt_format))

        # display mask
        height, width, channel = blurred_mask_resized.shape
        bytes_per_line = channel * width
        Qt_format = QtGui.QImage(blurred_mask_resized.data, width, height, bytes_per_line, QtGui.QImage.Format_RGB888)
        self.mask_container.setPixmap(QtGui.QPixmap(Qt_format))

        
    
    def edge_fading(self, original_image, colored_image, mask, kernel_size):
        
        blurred_mask = cv2.GaussianBlur(mask,(kernel_size,kernel_size),0)
        colored_image = colored_image.astype(float)
        original_image = original_image.astype(float)
        # blurred_mask = blurred_mask.astype(float)/255
        blended = (blurred_mask.astype(float)/255)*colored_image + (1-blurred_mask.astype(float)/255)*original_image
        blended = blended.astype("uint8")
        # blurred_mask = blurred_mask.astype('uint8')

        return blurred_mask, blended
        

    def resize_image_to_fit(self, image, image_container):
        container_width = image_container.width()
        container_height = image_container.height()

        original_height, original_width,_ = image.shape

        # Calculate the aspect ratio of the original image
        aspect_ratio = original_width / original_height

        # Calculate the maximum width and height that fit within the container
        max_width = min(container_width, original_width)
        max_height = min(container_height, original_height)

        # Calculate the new dimensions while maintaining the aspect ratio
        if aspect_ratio > 1:
            new_width = max_width
            new_height = int(new_width / aspect_ratio)
            if new_height > max_height:
                new_height = max_height
                new_width = int(new_height * aspect_ratio)
        else:
            new_height = max_height
            new_width = int(new_height * aspect_ratio)
            if new_width > max_width:
                new_width = max_width
                new_height = int(new_width / aspect_ratio)
        resized_image = cv2.resize(image, (new_width, new_height))

        return resized_image
    

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.image_container.setText(_translate("MainWindow", "Image"))
        self.mask_container.setText(_translate("MainWindow", "Mask"))
        self.pushButton_browse_image.setText(_translate("MainWindow", "Browse an image"))
        self.groupBox.setTitle(_translate("MainWindow", "Blending method"))
        self.label_R.setText(_translate("MainWindow", "R:"))
        self.label_G.setText(_translate("MainWindow", "G:"))
        self.label_B.setText(_translate("MainWindow", "B:"))
        self.alpha_value.setText(_translate("MainWindow", "alpha:"))
        self.label_3.setText(_translate("MainWindow", "0%"))
        self.groupBox_2.setTitle(_translate("MainWindow", "HSV method"))
        self.hue_label.setText(_translate("MainWindow", "Hue"))
        self.hue_value.setText(_translate("MainWindow", "0"))
        self.saturation_label.setText(_translate("MainWindow", "Saturation"))
        self.saturation_value.setText(_translate("MainWindow", "0"))
        self.value_label.setText(_translate("MainWindow", "Value"))
        self.value_value.setText(_translate("MainWindow", "0"))
        self.pushButton_3.setText(_translate("MainWindow", "Show Histogram"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Edge fading"))
        self.label.setText(_translate("MainWindow", "Kernel size"))
        self.label_2.setText(_translate("MainWindow", "0 x 0"))
        self.groupBox_4.setTitle(_translate("MainWindow", "Choose a model"))
        self.comboBox.setCurrentText(_translate("MainWindow", "U-Net"))
        self.comboBox.setItemText(0, _translate("MainWindow", "U-Net"))
        self.comboBox.setItemText(1, _translate("MainWindow", "U-Net dropout"))
        self.comboBox.setItemText(2, _translate("MainWindow", "U-Net data augmentation"))
        self.comboBox.setItemText(3, _translate("MainWindow", "U-Net pretrained VGG"))
        self.inference_button.setText(_translate("MainWindow", "Predict"))
        self.groupBox_5.setTitle(_translate("MainWindow", "Contrast Enhancement"))
        self.hist_eq_button.setText(_translate("MainWindow", "Apply Histogram Equalization"))
        self.clahe_button.setText(_translate("MainWindow", "Apply CLAHE"))
        self.save_img_button.setText(_translate("MainWindow", "Save image"))